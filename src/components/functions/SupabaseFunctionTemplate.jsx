// –°–ö–û–ü–ò–†–£–ô–¢–ï –≠–¢–û–¢ –ö–û–î –í –§–ê–ô–õ: supabase/functions/supabase/index.ts
// –ì–æ—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –≤ Supabase Edge Functions

/*
import { createClient } from 'npm:@supabase/supabase-js@2';

const supabaseAdmin = createClient(
  Deno.env.get('SUPABASE_URL'),
  Deno.env.get('SUPABASE_SERVICE_KEY')
);

const supabaseAnon = createClient(
  Deno.env.get('SUPABASE_URL'),
  Deno.env.get('SUPABASE_ANON_KEY')
);

Deno.serve(async (req) => {
  if (req.method !== 'POST') {
    return new Response(JSON.stringify({ error: '–ú–µ—Ç–æ–¥ –Ω–µ —Ä–∞–∑—Ä–µ—à–µ–Ω' }), {
      status: 405,
      headers: { 'Content-Type': 'application/json' }
    });
  }

  try {
    const { action, params = {} } = await req.json();
    const supabaseUser = createClient(
      Deno.env.get('SUPABASE_URL'),
      Deno.env.get('SUPABASE_ANON_KEY'),
      { global: { headers: { Authorization: req.headers.get('Authorization') ?? '' } } }
    );

    const {
      data: { user }
    } = await supabaseUser.auth.getUser();

    let result;
    
    switch (action) {
      // –ü–£–ë–õ–ò–ß–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø –ß–¢–ï–ù–ò–Ø - –∏—Å–ø–æ–ª—å–∑—É–µ–º anon –∫–ª–∏–µ–Ω—Ç
      case 'getApprovedBooks':
        const { data: books, error: booksError } = await supabaseAnon
          .from('books')
          .select('*')
          .eq('status', 'approved')
          .order('created_at', { ascending: false })
          .limit(params.limit || 12);
        if (booksError) throw booksError;
        result = books || [];
        break;

      case 'getBooksByGenre':
        const { data: genreBooks, error: genreError } = await supabaseAnon
          .from('books')
          .select('*')
          .eq('status', 'approved')
          .contains('genres', [params.genre])
          .limit(params.limit || 10);
        if (genreError) throw genreError;
        result = genreBooks || [];
        break;

      case 'getBookById':
        const { data: book, error: bookError } = await supabaseAnon
          .from('books')
          .select('*')
          .eq('id', params.id)
          .single();
        if (bookError) throw bookError;
        result = book;
        break;

      case 'getPublicBooks':
        const { data: publicBooks, error: publicBooksError } = await supabaseAnon
          .from('books')
          .select('*')
          .in('status', ['approved', 'public_domain'])
          .order('created_at', { ascending: false })
          .limit(params.limit || 50);
        if (publicBooksError) throw publicBooksError;
        result = publicBooks || [];
        break;

      // –ê–£–¢–ï–ù–¢–ò–§–ò–¶–ò–†–û–í–ê–ù–ù–´–ï –î–ï–ô–°–¢–í–ò–Ø –ß–¢–ï–ù–ò–Ø
      case 'getAuthorBooks':
        if (!user) throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
        const { data: authorBooks, error: authorError } = await supabaseAdmin
          .from('books')
          .select('*')
          .eq('author_email', user.email)
          .order('created_at', { ascending: false });
        if (authorError) throw authorError;
        result = authorBooks || [];
        break;

      case 'getUserPurchases':
        if (!user) throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
        const { data: purchases, error: purchaseError } = await supabaseAdmin
          .from('purchases')
          .select('*')
          .eq('buyer_email', user.email)
          .order('created_at', { ascending: false });
        if (purchaseError) throw purchaseError;
        result = purchases || [];
        break;
      
      case 'getPendingBooks':
        if (!user || (user.role !== 'admin' && user.role !== 'moderator')) {
          throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞/–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞');
        }
        const { data: pendingBooks, error: pendingError } = await supabaseAdmin
          .from('books')
          .select('*')
          .eq('status', 'pending')
          .order('created_at', { ascending: false })
          .limit(params.limit || 50);
        if (pendingError) throw pendingError;
        result = pendingBooks || [];
        break;

      // –û–ü–ï–†–ê–¶–ò–ò –ó–ê–ü–ò–°–ò - –∏—Å–ø–æ–ª—å–∑—É–µ–º service role
      case 'createBook':
        if (!user) throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
        const bookData = params.bookData;
        
        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!bookData.title || !bookData.author || !Array.isArray(bookData.genres) || bookData.genres.length === 0) {
          throw new Error('–ù–∞–∑–≤–∞–Ω–∏–µ, –∞–≤—Ç–æ—Ä –∏ –∫–∞–∫ –º–∏–Ω–∏–º—É–º –æ–¥–∏–Ω –∂–∞–Ω—Ä –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã');
        }
        
        if (!Array.isArray(bookData.languages)) {
          bookData.languages = [];
        }
        
        const validGenres = ['fiction', 'non-fiction', 'science', 'history', 'business', 'romance', 'mystery', 'fantasy', 'biography', 'self-help', 'philosophy'];
        const invalidGenres = bookData.genres.filter(g => !validGenres.includes(g));
        if (invalidGenres.length > 0) {
          throw new Error(`–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–µ –∂–∞–Ω—Ä—ã: ${invalidGenres.join(', ')}`);
        }
        
        const { data: newBook, error: createError } = await supabaseAdmin
          .from('books')
          .insert([{
            ...bookData,
            author_email: user.email,
            author_id: user.id,
            genre: bookData.genres[0]
          }])
          .select()
          .single();
        if (createError) throw createError;
        result = newBook;
        break;

      case 'updateBook':
        if (!user) throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
        
        const updateData = params.updateData;
        let query = supabaseAdmin.from('books').update(updateData).eq('id', params.bookId);
        
        if (user.role !== 'admin' && user.role !== 'moderator') {
          query = query.eq('author_email', user.email);
        }
        
        const { data: updatedBook, error: updateError } = await query.select().single();
        if (updateError) throw updateError;
        result = updatedBook;
        break;
      
      case 'updateExchangeRate':
        if (!user || user.role !== 'admin') throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ—Å—Ç—É–ø –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞');
        const { data: rateData, error: rateError } = await supabaseAdmin
          .from('exchange_rates')
          .upsert({ 
            currency_pair: 'KAS/USD', 
            rate: params.rate 
          }, { 
            onConflict: 'currency_pair' 
          })
          .select()
          .single();
        if (rateError) throw rateError;
        result = rateData;
        break;
      
      case 'getSignedUrl':
        if (!user) throw new Error('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è');
        const { data: { signedUrl }, error: signedError } = await supabaseAdmin.storage
          .from('books')
          .createSignedUrl(params.filePath, params.expiresIn || 3600);
        if (signedError) throw signedError;
        result = { signedUrl };
        break;
      
      default:
        throw new Error(`–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ: ${action}`);
    }

    return new Response(JSON.stringify(result), {
      headers: { 'Content-Type': 'application/json' }
    });

  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ Supabase API:', error);
    const status = error.message.includes('–¢—Ä–µ–±—É–µ—Ç—Å—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è') ? 401 :
                  error.message.includes('–¥–æ—Å—Ç—É–ø') ? 403 : 
                  error.message.includes('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ') ? 404 : 400;
    
    return new Response(JSON.stringify({ error: error.message }), {
      status,
      headers: { 'Content-Type': 'application/json' }
    });
  }
});
*/

export default function SupabaseFunctionTemplate() {
  return (
    <div className="p-8 bg-gray-50 min-h-screen">
      <div className="max-w-4xl mx-auto">
        <h1 className="text-3xl font-bold mb-6 text-center">üìÅ –§–∞–π–ª—ã Supabase Functions –¥–ª—è KasBook</h1>
        
        <div className="bg-white rounded-lg shadow-lg p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">üìÑ supabase/functions/supabase/index.ts</h2>
          <p className="text-gray-600 mb-4">
            –û—Å–Ω–æ–≤–Ω–∞—è API —Ñ—É–Ω–∫—Ü–∏—è —Å –≤—Å–µ–º–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞–º–∏ –¥–µ–π—Å—Ç–≤–∏–π. –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –∫–æ–¥ –∏–∑ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –≤—ã—à–µ.
          </p>
          <div className="bg-green-50 p-4 rounded border border-green-200">
            <p className="text-green-700 font-medium">‚úÖ –í–∫–ª—é—á–∞–µ—Ç –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ actions –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è 405 –æ—à–∏–±–æ–∫</p>
          </div>
        </div>

        <div className="bg-white rounded-lg shadow-lg p-6">
          <h2 className="text-xl font-semibold mb-4">üöÄ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é</h2>
          <ol className="list-decimal list-inside space-y-2 text-gray-700">
            <li>–°–æ–∑–¥–∞–π—Ç–µ –ø–∞–ø–∫—É <code className="bg-gray-100 px-2 py-1 rounded">supabase/functions/supabase/</code></li>
            <li>–°–æ—Ö—Ä–∞–Ω–∏—Ç–µ –∫–æ–¥ –∫–∞–∫ <code className="bg-gray-100 px-2 py-1 rounded">index.ts</code></li>
            <li>–í—ã–ø–æ–ª–Ω–∏—Ç–µ: <code className="bg-blue-100 px-2 py-1 rounded">supabase functions deploy supabase</code></li>
          </ol>
        </div>
      </div>
    </div>
  );
}
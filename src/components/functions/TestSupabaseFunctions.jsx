// –î–ò–ê–ì–ù–û–°–¢–ò–ß–ï–°–ö–ò–ô SQL - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –≤ Supabase SQL Editor –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

/*
-- –®–ê–ì 1: –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
CREATE TABLE IF NOT EXISTS public.query_logs (
    id SERIAL PRIMARY KEY,
    table_name TEXT NOT NULL,
    operation TEXT NOT NULL,
    created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- –®–ê–ì 2: –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
CREATE OR REPLACE FUNCTION log_table_access()
RETURNS TRIGGER AS $$
BEGIN
    INSERT INTO public.query_logs (table_name, operation)
    VALUES (TG_TABLE_NAME, TG_OP);
    
    IF TG_OP = 'SELECT' THEN
        RETURN NULL; -- –î–ª—è SELECT —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–æ–ª–∂–Ω—ã –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å NULL
    ELSE
        RETURN COALESCE(NEW, OLD); -- –î–ª—è –¥—Ä—É–≥–∏—Ö –æ–ø–µ—Ä–∞—Ü–∏–π –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
    END IF;
END;
$$ LANGUAGE plpgsql;

-- –®–ê–ì 3: –°–æ–∑–¥–∞–µ–º —Ç—Ä–∏–≥–≥–µ—Ä—ã –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏–π –∫ —Ç–∞–±–ª–∏—Ü–µ books
DROP TRIGGER IF EXISTS log_books_access ON public.books;
CREATE TRIGGER log_books_access
    AFTER SELECT OR INSERT OR UPDATE OR DELETE ON public.books
    FOR EACH ROW EXECUTE FUNCTION log_table_access();

-- –®–ê–ì 4: –î–∏–∞–≥–Ω–æ—Å—Ç–∏—á–µ—Å–∫–∏–µ –∑–∞–ø—Ä–æ—Å—ã - –≤—ã–ø–æ–ª–Ω–∏—Ç–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∞–Ω–Ω—ã—Ö
SELECT '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ç–∞–±–ª–∏—Ü—ã books:' AS info;
SELECT COUNT(*) as total_books, 
       COUNT(CASE WHEN status = 'approved' THEN 1 END) as approved_books,
       COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_books
FROM public.books;

-- –ü–æ–∫–∞–∑–∞—Ç—å –ø–µ—Ä–≤—ã–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥
SELECT '–ü—Ä–∏–º–µ—Ä—ã –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥:' AS info;
SELECT id, title, author, status, created_at 
FROM public.books 
WHERE status = 'approved' 
ORDER BY created_at DESC 
LIMIT 5;

-- –ü–æ—Å–ª–µ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –º–æ–∂–µ—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–∏ –ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏—è:
-- SELECT * FROM public.query_logs WHERE table_name = 'books' ORDER BY created_at DESC LIMIT 10;
*/

// REACT-–∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π
import React, { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { getApprovedBooks, getBooksByGenre, getPublicBooks } from '../utils/supabase';

export default function TestSupabaseFunctions() {
  const [testResults, setTestResults] = useState({});
  const [isLoading, setIsLoading] = useState(false);

  const runTest = async (testName, testFn) => {
    setIsLoading(true);
    try {
      console.log(`üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞: ${testName}`);
      const result = await testFn();
      setTestResults(prev => ({
        ...prev,
        [testName]: {
          success: true,
          data: result,
          count: Array.isArray(result) ? result.length : '–Ω–µ –º–∞—Å—Å–∏–≤'
        }
      }));
      console.log(`‚úÖ –¢–µ—Å—Ç ${testName} —É—Å–ø–µ—à–µ–Ω:`, result);
    } catch (error) {
      setTestResults(prev => ({
        ...prev,
        [testName]: {
          success: false,
          error: error.message
        }
      }));
      console.error(`‚ùå –¢–µ—Å—Ç ${testName} –ø—Ä–æ–≤–∞–ª–∏–ª—Å—è:`, error);
    }
    setIsLoading(false);
  };

  const tests = [
    {
      name: 'getApprovedBooks',
      fn: () => getApprovedBooks(5),
      description: '–ó–∞–≥—Ä—É–∑–∫–∞ –æ–¥–æ–±—Ä–µ–Ω–Ω—ã—Ö –∫–Ω–∏–≥'
    },
    {
      name: 'getPublicBooks',
      fn: () => getPublicBooks(5),
      description: '–ó–∞–≥—Ä—É–∑–∫–∞ –ø—É–±–ª–∏—á–Ω—ã—Ö –∫–Ω–∏–≥'
    },
    {
      name: 'getBooksByGenre-fiction',
      fn: () => getBooksByGenre('fiction', 3),
      description: '–ó–∞–≥—Ä—É–∑–∫–∞ –∫–Ω–∏–≥ –∂–∞–Ω—Ä–∞ Fiction'
    }
  ];

  return (
    <div className="container mx-auto p-6 space-y-6">
      <Card>
        <CardHeader>
          <CardTitle>üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π Supabase</CardTitle>
        </CardHeader>
        <CardContent className="space-y-4">
          {tests.map(test => (
            <div key={test.name} className="flex items-center justify-between p-4 border rounded">
              <div>
                <h3 className="font-semibold">{test.name}</h3>
                <p className="text-sm text-muted-foreground">{test.description}</p>
                
                {testResults[test.name] && (
                  <div className={`mt-2 text-sm ${testResults[test.name].success ? 'text-green-600' : 'text-red-600'}`}>
                    {testResults[test.name].success ? (
                      <span>‚úÖ –£—Å–ø–µ—Ö: {testResults[test.name].count} –∑–∞–ø–∏—Å–µ–π</span>
                    ) : (
                      <span>‚ùå –û—à–∏–±–∫–∞: {testResults[test.name].error}</span>
                    )}
                  </div>
                )}
              </div>
              
              <Button
                onClick={() => runTest(test.name, test.fn)}
                disabled={isLoading}
                size="sm"
              >
                {isLoading ? '–¢–µ—Å—Ç–∏—Ä—É–µ–º...' : '–¢–µ—Å—Ç'}
              </Button>
            </div>
          ))}
          
          <Button
            onClick={() => {
              setTestResults({});
              tests.forEach(test => runTest(test.name, test.fn));
            }}
            className="w-full"
            disabled={isLoading}
          >
            –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç—ã
          </Button>
        </CardContent>
      </Card>
    </div>
  );
}